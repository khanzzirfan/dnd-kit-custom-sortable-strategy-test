{"version":3,"sources":["Grid.tsx","Item.tsx","SortableItem.tsx","App.tsx","index.tsx"],"names":["Grid","children","columns","style","display","gridTemplateColumns","gridGap","maxWidth","margin","Item","forwardRef","ref","id","withOpacity","isDragging","props","inlineStyles","opacity","transformOrigin","height","width","borderRadius","cursor","backgroundColor","justifyContent","alignItems","boxShadow","transform","SortableItem","useSortable","attributes","listeners","setNodeRef","transition","CSS","Transform","toString","undefined","App","useState","Array","from","length","_","i","items","setItems","activeId","setActiveId","sensors","useSensors","useSensor","MouseSensor","TouchSensor","handleDragStart","useCallback","event","active","handleDragEnd","over","oldIndex","indexOf","newIndex","arrayMove","handleDragCancel","collisionDetection","closestCenter","onDragStart","onDragEnd","onDragCancel","strategy","rectSortingStrategy","map","adjustScale","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAsBeA,EAhBa,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QACrC,OACI,qBACIC,MAAO,CACHC,QAAS,OACTC,oBAAoB,UAAD,OAAYH,EAAZ,UACnBI,QAAS,GACTC,SAAU,QACVC,OAAQ,cANhB,SASKP,K,qBCWEQ,EApBFC,sBAAsC,WAAmDC,GAAS,IAAzDC,EAAwD,EAAxDA,GAAIC,EAAoD,EAApDA,YAAaC,EAAuC,EAAvCA,WAAYX,EAA2B,EAA3BA,MAAUY,EAAiB,yDACpGC,EAA2B,aAC7BC,QAASJ,EAAc,MAAQ,IAC/BK,gBAAiB,UACjBC,OAAQ,QACRC,MAAO,QACPC,aAAc,OACdC,OAAQR,EAAa,WAAa,OAClCS,gBAAiB,UACjBnB,QAAS,OACToB,eAAgB,SAChBC,WAAY,SACZC,UAAWZ,EAAc,0EAA4E,0EACrGa,UAAWb,EAAa,cAAgB,YACrCX,GAGP,OAAO,6CAAKQ,IAAKA,EAAKR,MAAOa,GAAkBD,GAAxC,aAAgDH,QCO5CgB,EA3BqB,SAACb,GACjC,MAOIc,YAAY,CAAEjB,GAAIG,EAAMH,KANxBE,EADJ,EACIA,WACAgB,EAFJ,EAEIA,WACAC,EAHJ,EAGIA,UACAC,EAJJ,EAIIA,WACAL,EALJ,EAKIA,UACAM,EANJ,EAMIA,WAGE9B,EAAQ,CACVwB,UAAWO,IAAIC,UAAUC,SAAST,GAClCM,WAAYA,QAAcI,GAG9B,OACI,cAAC,EAAD,qCACI1B,IAAKqB,EACL7B,MAAOA,EACPU,YAAaC,GACTC,GACAe,GACAC,KCsCDO,EAhDC,WACZ,MAA0BC,mBAASC,MAAMC,KAAK,CAAEC,OAAQ,KAAM,SAACC,EAAGC,GAAJ,OAAWA,EAAI,GAAGR,eAAhF,mBAAOS,EAAP,KAAcC,EAAd,KACA,EAAgCP,mBAAwB,MAAxD,mBAAOQ,EAAP,KAAiBC,EAAjB,KACMC,EAAUC,YAAWC,YAAUC,KAAcD,YAAUE,MAEvDC,EAAkBC,uBAAY,SAACC,GACjCR,EAAYQ,EAAMC,OAAO7C,MAC1B,IACG8C,EAAgBH,uBAAY,SAACC,GAC/B,IAAQC,EAAiBD,EAAjBC,OAAQE,EAASH,EAATG,KAEZF,EAAO7C,MAAP,OAAc+C,QAAd,IAAcA,OAAd,EAAcA,EAAM/C,KACpBkC,GAAS,SAACD,GACN,IAAMe,EAAWf,EAAMgB,QAAQJ,EAAO7C,IAChCkD,EAAWjB,EAAMgB,QAAQF,EAAM/C,IAErC,OAAOmD,YAAUlB,EAAOe,EAAUE,MAI1Cd,EAAY,QACb,IACGgB,EAAmBT,uBAAY,WACjCP,EAAY,QACb,IAEH,OACI,eAAC,IAAD,CACIC,QAASA,EACTgB,mBAAoBC,IACpBC,YAAab,EACbc,UAAWV,EACXW,aAAcL,EALlB,UAOI,cAAC,IAAD,CAAiBnB,MAAOA,EAAOyB,SAAUC,IAAzC,SACI,cAAC,EAAD,CAAMrE,QAAS,EAAf,SACK2C,EAAM2B,KAAI,SAAC5D,GAAD,OACP,cAAC,EAAD,CAAuBA,GAAIA,GAARA,UAI/B,cAAC,IAAD,CAAa6D,aAAW,EAACtE,MAAO,CAAEe,gBAAiB,QAAnD,SACK6B,EAAW,cAAC,EAAD,CAAMnC,GAAImC,EAAUjC,YAAU,IAAM,WCtDhE4D,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.caea96ab.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\ntype GridProps = {\n    columns: number;\n};\n\nconst Grid: FC<GridProps> = ({ children, columns }) => {\n    return (\n        <div\n            style={{\n                display: 'grid',\n                gridTemplateColumns: `repeat(${columns}, 1fr)`,\n                gridGap: 10,\n                maxWidth: '800px',\n                margin: '100px auto',\n            }}\n        >\n            {children}\n        </div>\n    );\n};\n\nexport default Grid;\n","import React, { forwardRef, HTMLAttributes, CSSProperties } from 'react';\n\nexport type ItemProps = HTMLAttributes<HTMLDivElement> & {\n    id: string;\n    withOpacity?: boolean;\n    isDragging?: boolean;\n};\n\nconst Item = forwardRef<HTMLDivElement, ItemProps>(({ id, withOpacity, isDragging, style, ...props }, ref) => {\n    const inlineStyles: CSSProperties = {\n        opacity: withOpacity ? '0.5' : '1',\n        transformOrigin: '50% 50%',\n        height: '140px',\n        width: '140px',\n        borderRadius: '10px',\n        cursor: isDragging ? 'grabbing' : 'grab',\n        backgroundColor: '#ffffff',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        boxShadow: isDragging  ? 'rgb(63 63 68 / 5%) 0px 2px 0px 2px, rgb(34 33 81 / 15%) 0px 2px 3px 2px' : 'rgb(63 63 68 / 5%) 0px 0px 0px 1px, rgb(34 33 81 / 15%) 0px 1px 3px 0px',\n        transform: isDragging ? 'scale(1.05)' : 'scale(1)',\n        ...style,\n    };\n\n    return <div ref={ref} style={inlineStyles} {...props}>{id}</div>;\n});\n\nexport default Item;\n","import React, { FC } from \"react\";\nimport { useSortable } from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport Item, { ItemProps } from \"./Item\";\n\nconst SortableItem: FC<ItemProps> = (props) => {\n    const {\n        isDragging,\n        attributes,\n        listeners,\n        setNodeRef,\n        transform,\n        transition\n    } = useSortable({ id: props.id });\n\n    const style = {\n        transform: CSS.Transform.toString(transform),\n        transition: transition || undefined,\n    };\n\n    return (\n        <Item\n            ref={setNodeRef}\n            style={style}\n            withOpacity={isDragging}\n            {...props}\n            {...attributes}\n            {...listeners}\n        />\n    );\n};\n\nexport default SortableItem;\n","import React, { FC, useState, useCallback } from 'react';\nimport {\n    DndContext,\n    closestCenter,\n    MouseSensor,\n    TouchSensor,\n    DragOverlay,\n    useSensor,\n    useSensors,\n    DragStartEvent,\n    DragEndEvent,\n} from '@dnd-kit/core';\nimport { arrayMove, SortableContext, rectSortingStrategy } from '@dnd-kit/sortable';\nimport Grid from './Grid';\nimport SortableItem from './SortableItem';\nimport Item from './Item';\n\nconst App: FC = () => {\n    const [items, setItems] = useState(Array.from({ length: 20 }, (_, i) => (i + 1).toString()));\n    const [activeId, setActiveId] = useState<string | null>(null);\n    const sensors = useSensors(useSensor(MouseSensor), useSensor(TouchSensor));\n\n    const handleDragStart = useCallback((event: DragStartEvent) => {\n        setActiveId(event.active.id);\n    }, []);\n    const handleDragEnd = useCallback((event: DragEndEvent) => {\n        const { active, over } = event;\n\n        if (active.id !== over?.id) {\n            setItems((items) => {\n                const oldIndex = items.indexOf(active.id);\n                const newIndex = items.indexOf(over!.id);\n\n                return arrayMove(items, oldIndex, newIndex);\n            });\n        }\n\n        setActiveId(null);\n    }, []);\n    const handleDragCancel = useCallback(() => {\n        setActiveId(null);\n    }, []);\n\n    return (\n        <DndContext\n            sensors={sensors}\n            collisionDetection={closestCenter}\n            onDragStart={handleDragStart}\n            onDragEnd={handleDragEnd}\n            onDragCancel={handleDragCancel}\n        >\n            <SortableContext items={items} strategy={rectSortingStrategy}>\n                <Grid columns={5}>\n                    {items.map((id) => (\n                        <SortableItem key={id} id={id} />\n                    ))}\n                </Grid>\n            </SortableContext>\n            <DragOverlay adjustScale style={{ transformOrigin: '0 0 ' }}>\n                {activeId ? <Item id={activeId} isDragging /> : null}\n            </DragOverlay>\n        </DndContext>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}